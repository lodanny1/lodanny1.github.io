// index.js (CommonJS, verbose errors)
const { DynamoDBClient } = require("@aws-sdk/client-dynamodb");
const { DynamoDBDocumentClient, ScanCommand } = require("@aws-sdk/lib-dynamodb");

const ORIGIN       = process.env.ORIGIN || "*";
const TABLE        = process.env.TABLE_NAME;
const BUCKET       = process.env.BUCKET_NAME;
const allowedOrig  = new Set([ORIGIN, "http://localhost:5173"]);

function cors(event) {
  const h = (event && event.headers) || {};
  const reqOrigin = h.origin || h.Origin;
  const allow = allowedOrig.has(reqOrigin) ? reqOrigin : ORIGIN;
  return {
    "Content-Type": "application/json",
    "Access-Control-Allow-Origin": allow,
    "Access-Control-Allow-Headers": "Authorization,Content-Type",
  };
}

// Build regional client explicitly (safest)
const ddb = DynamoDBDocumentClient.from(
  new DynamoDBClient({ region: process.env.AWS_REGION || "us-west-1" }),
  { marshallOptions: { removeUndefinedValues: true } }
);

exports.handler = async (event) => {
  try {
    // ---- Guard envs so we fail with a useful message
    if (!TABLE) throw new Error("Missing env TABLE_NAME");
    if (!BUCKET) throw new Error("Missing env BUCKET_NAME");

    const qs = (event && event.queryStringParameters) || {};
    const prefix = typeof qs.prefix === "string" ? qs.prefix : "";
    const limit = Math.min(Number(qs.limit || 200), 500);

    // DynamoDB call
    let scanRes;
    try {
      scanRes = await ddb.send(new ScanCommand({ TableName: TABLE, Limit: limit }));
    } catch (e) {
      // Surface common DDB errors (ValidationException / AccessDenied)
      throw new Error(`DynamoDB Scan failed: ${e.name || "Error"}: ${e.message}`);
    }

    const items = (scanRes.Items || [])
      .filter(it => it.bucket === BUCKET)
      .filter(it => typeof it.key === "string")
      .filter(it => (prefix ? it.key.startsWith(prefix) : true))
      .filter(it => (typeof it.contentType === "string" ? !it.contentType.includes("x-directory") : true))
      .filter(it => (typeof it.size === "number" ? it.size > 0 : true))
      .map(it => ({
        key: it.key,
        bucket: it.bucket,
        size: typeof it.size === "number" ? it.size : null,
        contentType: it.contentType || null,
        status: it.status || null,
        processedAt: it.processedAt || null,
      }))
      .sort((a, b) => String(b.processedAt || "").localeCompare(String(a.processedAt || "")));

    return { statusCode: 200, headers: cors(event), body: JSON.stringify({ items }) };
  } catch (err) {
    console.error("FILES_LIST_ERROR:", err);
    return {
      statusCode: 500,
      headers: cors(event),
      body: JSON.stringify({
        error: "FilesListFunctionError",
        detail: String(err && err.message ? err.message : err),
        env: {
          region: process.env.AWS_REGION,
          table: TABLE ? "set" : "MISSING",
          bucket: BUCKET ? "set" : "MISSING",
        },
      }),
    };
  }
};






index-CJcKEnja.js:67  GET https://7psypm9d3b.execute-api.us-west-1.amazonaws.com/prod/files/list 500 (Internal Server Error)
