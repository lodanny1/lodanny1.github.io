'use strict';

const AWS = require('aws-sdk');
const s3 = new AWS.S3({ region: 'us-west-1', signatureVersion: 'v4' });

const BUCKET = 'severless-proj-uploads-251985477703-us-west-1';
const ORIGIN = 'https://main.d28wvz3bs3pz1c.amplifyapp.com';

exports.handler = async (event) => {
  try {
    const body = parseBody(event.body);
    const key = body.key;
    const contentType = body.contentType || 'application/octet-stream';
    if (!key) return resp(400, { error: "Missing 'key'" });

    const out = await s3.createMultipartUpload({
      Bucket: BUCKET,
      Key: key,
      ContentType: contentType
    }).promise();

    return resp(200, { uploadId: out.UploadId });
  } catch (err) {
    console.error(err);
    return resp(500, { error: 'Internal error', detail: String(err) });
  }
};

function parseBody(b){ if(!b) return {}; if(typeof b==='string'){ try{return JSON.parse(b)}catch{ return {} } } return b }
function resp(statusCode, body){
  return {
    statusCode,
    headers: {
      'Content-Type': 'application/json',
      'Access-Control-Allow-Origin': ORIGIN,
      'Access-Control-Allow-Headers': 'Authorization,Content-Type',
      'Access-Control-Allow-Methods': 'OPTIONS,GET,POST'
    },
    body: JSON.stringify(body)
  };
}

------------

'use strict';

const AWS = require('aws-sdk');
const s3 = new AWS.S3({ region: 'us-west-1', signatureVersion: 'v4' });

const BUCKET = 'severless-proj-uploads-251985477703-us-west-1';
const ORIGIN = 'https://main.d28wvz3bs3pz1c.amplifyapp.com';

exports.handler = async (event) => {
  try {
    const body = parseBody(event.body);
    const key = body.key;
    const uploadId = body.uploadId;
    const partNumber = Number(body.partNumber);

    if (!key) return resp(400, { error: "Missing 'key'" });
    if (!uploadId) return resp(400, { error: "Missing 'uploadId'" });
    if (!partNumber || partNumber < 1) return resp(400, { error: "Invalid 'partNumber'" });

    const url = s3.getSignedUrl('uploadPart', {
      Bucket: BUCKET,
      Key: key,
      UploadId: uploadId,
      PartNumber: partNumber,
      Expires: 900
    });

    return resp(200, { url });
  } catch (err) {
    console.error(err);
    return resp(500, { error: 'Internal error', detail: String(err) });
  }
};

function parseBody(b){ if(!b) return {}; if(typeof b==='string'){ try{return JSON.parse(b)}catch{ return {} } } return b }
function resp(statusCode, body){
  return {
    statusCode,
    headers: {
      'Content-Type': 'application/json',
      'Access-Control-Allow-Origin': ORIGIN,
      'Access-Control-Allow-Headers': 'Authorization,Content-Type',
      'Access-Control-Allow-Methods': 'OPTIONS,GET,POST'
    },
    body: JSON.stringify(body)
  };
}


-----------

'use strict';

const AWS = require('aws-sdk');
const s3 = new AWS.S3({ region: 'us-west-1', signatureVersion: 'v4' });

const BUCKET = 'severless-proj-uploads-251985477703-us-west-1';
const ORIGIN = 'https://main.d28wvz3bs3pz1c.amplifyapp.com';

exports.handler = async (event) => {
  try {
    const body = parseBody(event.body);
    const key = body.key;
    const uploadId = body.uploadId;
    let parts = body.parts;

    if (!key) return resp(400, { error: "Missing 'key'" });
    if (!uploadId) return resp(400, { error: "Missing 'uploadId'" });
    if (!Array.isArray(parts) || parts.length === 0) return resp(400, { error: "Missing 'parts'" });

    // Normalize: enforce numbers and quote ETags
    parts = parts.map(function (p) {
      var et = p.ETag || p.etag;
      if (et && et[0] !== '"') et = '"' + et + '"';
      var pn = Number(p.PartNumber || p.partNumber);
      return { ETag: et, PartNumber: pn };
    }).sort(function(a,b){ return a.PartNumber - b.PartNumber });

    await s3.completeMultipartUpload({
      Bucket: BUCKET,
      Key: key,
      UploadId: uploadId,
      MultipartUpload: { Parts: parts }
    }).promise();

    return resp(200, { ok: true });
  } catch (err) {
    console.error(err);
    return resp(500, { error: 'Internal error', detail: String(err) });
  }
};

function parseBody(b){ if(!b) return {}; if(typeof b==='string'){ try{return JSON.parse(b)}catch{ return {} } } return b }
function resp(statusCode, body){
  return {
    statusCode,
    headers: {
      'Content-Type': 'application/json',
      'Access-Control-Allow-Origin': ORIGIN,
      'Access-Control-Allow-Headers': 'Authorization,Content-Type',
      'Access-Control-Allow-Methods': 'OPTIONS,GET,POST'
    },
    body: JSON.stringify(body)
  };
}


